<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>C++日期和时间</title>
    <url>/2021/11/04/C-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p>C++包含两类对时间操作的支持：</p>
<ul>
<li><a href="https://zh.cppreference.com/w/cpp/chrono">chrono库</a></li>
<li><a href="https://zh.cppreference.com/w/cpp/chrono/c">C风格日期与时间库</a></li>
</ul>
<p>这里主要介绍std::chrono库部分类及使用std::chrono的例子</p>
<p>chrono库定义了三种主要类型以及工具函数和常用的typdef(类型别名)</p>
<ul>
<li>时钟</li>
<li>时长</li>
<li>时间点</li>
</ul>
<p>使用chrono库需要先包含头文件<a href="https://zh.cppreference.com/w/cpp/header/chrono"><chrono></a>，所在命名空间为std::chrono</p>
<h2 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h2><p>时钟由起点（或纪元）及计次频率组成。如，时钟可以拥有1970年1月1日</p>
<h4 id="system-clock"><a href="#system-clock" class="headerlink" title="system_clock"></a><a href="https://zh.cppreference.com/w/cpp/chrono/system_clock">system_clock</a></h4><p>表示系统范围的实时壁钟(系统时间)。它可以不单调：大多数系统上，系统时间可以在任何时候被调节。</p>
<p>唯一有能力映射其时间点到C风格时间的C++时钟。</p>
<p><strong>to_time_t</strong> ：将时间点time_point转换为std::time_t</p>
<p><strong>from_time_t</strong>：将std::time_t转换为时间点time_point</p>
<h4 id="steady-clock"><a href="#steady-clock" class="headerlink" title="steady_clock"></a><a href="https://zh.cppreference.com/w/cpp/chrono/steady_clock">steady_clock</a></h4><p>表示单调时钟。此时钟的时间点无法减少，因为物理时间向前移动。最适于度量间隔。</p>
<h4 id="high-resolution-clock"><a href="#high-resolution-clock" class="headerlink" title="high_resolution_clock"></a>high_resolution_clock</h4><p>表示实现提供的拥有最小计次周期的时钟。它可以是system_clock或steady_clock的别名，在不同标准库实现之间实现并不一致，尽量不要使用。</p>
<p><strong>对时长度量使用steady_clock，对壁钟时间使用system_clock</strong></p>
<p>以上三个类都拥有公开静态成员函数now()，该函数返回表示当前时间的时间点，返回类型为std::chrono::time_point</p>
<h2 id="时间点"><a href="#时间点" class="headerlink" title="时间点"></a>时间点</h2><h4 id="time-point"><a href="#time-point" class="headerlink" title="time_point"></a><a href="https://zh.cppreference.com/w/cpp/chrono/time_point">time_point</a></h4><p>表示时间中的一个点。</p>
<h2 id="时长"><a href="#时长" class="headerlink" title="时长"></a>时长</h2><h4 id="duration"><a href="#duration" class="headerlink" title="duration"></a><a href="https://zh.cppreference.com/w/cpp/chrono/duration">duration</a></h4><p>表示时间间隔。</p>
<h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><h3 id="秒表"><a href="#秒表" class="headerlink" title="秒表"></a>秒表</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (run)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; hour &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; minute &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; second;</span><br><span class="line">        <span class="keyword">auto</span> start = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">auto</span> end= std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">        second += std::chrono::duration_cast&lt;std::chrono::seconds&gt;(end - start).<span class="built_in">count</span>();</span><br><span class="line">        <span class="keyword">if</span> (second == <span class="number">60</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            second = <span class="number">0</span>;</span><br><span class="line">            ++minute;</span><br><span class="line">            <span class="keyword">if</span> (minute == <span class="number">60</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                minute = <span class="number">0</span>;</span><br><span class="line">                ++hour;</span><br><span class="line">                <span class="keyword">if</span> (hour == <span class="number">24</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    hour = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++线程(一)</title>
    <url>/2021/11/05/C-%E7%BA%BF%E7%A8%8B-%E4%B8%80/</url>
    <content><![CDATA[<p>线程使得程序能在数个处理器核心同时执行。</p>
<h1 id="std-thread"><a href="#std-thread" class="headerlink" title="std::thread"></a>std::thread</h1><p>类std::thread表示单个执行线程。线程使得多个函数可以同时执行。</p>
<h2 id="观察器"><a href="#观察器" class="headerlink" title="观察器"></a>观察器</h2><h4 id="joinable"><a href="#joinable" class="headerlink" title="joinable()"></a>joinable()</h4><p>检查thread对象是否标识活跃的执行线程。</p>
<h4 id="get-id"><a href="#get-id" class="headerlink" title="get_id()"></a>get_id()</h4><p>返回线程的id。</p>
<h4 id="native-handle"><a href="#native-handle" class="headerlink" title="native_handle()"></a>native_handle()</h4><p>返回线程句柄。</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>阻塞当前线程直至*this所标识的线程结束其执行</p>
<h4 id="detach"><a href="#detach" class="headerlink" title="detach()"></a>detach()</h4><p>将子线程和主线程的关联分离，即执行了detach()的线程对象可以独立的运行</p>
<h4 id="swap"><a href="#swap" class="headerlink" title="swap()"></a>swap()</h4><p>交换两个thread对象</p>
<h2 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> run = <span class="literal">true</span>;</span><br><span class="line">std::mutex run_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;thread executing f1()\n&quot;</span>;</span><br><span class="line">        ++n;</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span>&amp; n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;thread executing f2()\n&quot;</span>;</span><br><span class="line">        ++n;</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(run_mutex)</span></span>;    <span class="comment">//尝试获得mutex所有权</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;thread executing f3()\n&quot;</span>;</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    run = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fa</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;thread executing fa()\n&quot;</span>;</span><br><span class="line">            ++n;</span><br><span class="line">            std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;thread executing B()\n&quot;</span>;</span><br><span class="line">            ++n;</span><br><span class="line">            std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_example1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    std::cout &lt;&lt; std::thread::<span class="built_in">hardware_concurrency</span>() &lt;&lt; <span class="string">&quot; concurrent threads are supported.\n&quot;</span>;</span><br><span class="line">    std::thread t1; <span class="comment">//构造不表示线程的新thread对象</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t1 id is: &quot;</span> &lt;&lt; t1.<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t1 joinable: &quot;</span> &lt;&lt; t1.<span class="built_in">joinable</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t1 handle is : &quot;</span> &lt;&lt; t1.<span class="built_in">native_handle</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(f1, n + <span class="number">1</span>)</span></span>;  <span class="comment">//按值传递</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t2 id is: &quot;</span>&lt;&lt;t2.<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t2 joinable: &quot;</span> &lt;&lt; t2.<span class="built_in">joinable</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t2 handle is : &quot;</span> &lt;&lt; t2.<span class="built_in">native_handle</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="function">std::thread <span class="title">t3</span><span class="params">(f2, std::ref(n))</span></span>;    <span class="comment">//按引用传递</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t4</span><span class="params">(std::move(t3))</span></span>;      <span class="comment">//移动构造，t3不再是线程</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t5</span><span class="params">(&amp;A::fa, &amp;a)</span></span>;         <span class="comment">//在对象a上运行A::fa</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t6</span><span class="params">(b)</span></span>;                  <span class="comment">//在对象b的副本运行b::operator()</span></span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;after join,t2 joinable: &quot;</span> &lt;&lt; t2.<span class="built_in">joinable</span>() &lt;&lt; std::endl;</span><br><span class="line">    t4.<span class="built_in">join</span>();</span><br><span class="line">    t5.<span class="built_in">join</span>();</span><br><span class="line">    t6.<span class="built_in">join</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;n is &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;n in A is &quot;</span> &lt;&lt; a.n &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;n in B is &quot;</span> &lt;&lt; b.n &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;********************************************************************\n\n&quot;</span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t7</span><span class="params">(f1,<span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t8</span><span class="params">(f2,std::ref(n))</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t7 id is: &quot;</span> &lt;&lt; t7.<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t8 id is: &quot;</span> &lt;&lt; t8.<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::<span class="built_in">swap</span>(t7, t8);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t7 id is: &quot;</span> &lt;&lt; t7.<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t8 id is: &quot;</span> &lt;&lt; t8.<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">    t7.<span class="built_in">swap</span>(t8);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t7 id is: &quot;</span> &lt;&lt; t7.<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;t8 id is: &quot;</span> &lt;&lt; t8.<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">    t7.<span class="built_in">join</span>();</span><br><span class="line">    t8.<span class="built_in">join</span>();</span><br><span class="line">    <span class="function">std::thread <span class="title">t9</span><span class="params">(f3)</span></span>;</span><br><span class="line">    t9.<span class="built_in">detach</span>();</span><br><span class="line">    <span class="keyword">while</span> (run)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">thread_example1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
